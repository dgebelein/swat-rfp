<Application x:Class="swat.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:swat"
				 xmlns:ui="clr-namespace:TTP.UiUtils;assembly=TtpUiUtils"	
             StartupUri="MainWindow.xaml">
	
<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/SwatTheme;component/SwatTheme.xaml"/>
			</ResourceDictionary.MergedDictionaries>
			<Style x:Key="errorControl" TargetType="{x:Type	TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
				<Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="Validation.HasError"	Value="true" />
							<Condition Property="IsEnabled" Value="true"	/>
						</MultiTrigger.Conditions>
						<Setter Property="ToolTip"	Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
						<Setter Property="Foreground"	Value="Red"/>
						<Setter Property="BorderBrush" Value="Red"/>
					</MultiTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="errorComboBox" TargetType="{x:Type ComboBox}"	BasedOn="{StaticResource {x:Type	ComboBox}}">
				<!--<Setter	Property="Validation.ErrorTemplate"	Value="{x:Null}"/>-->
				<Setter Property="Validation.ErrorTemplate">
					<Setter.Value>
						<ControlTemplate>
							<DockPanel>
								<Border BorderBrush="Red" BorderThickness="2">
									<AdornedElementPlaceholder	/>
								</Border>
							</DockPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="Validation.HasError"	Value="true" />
							<Condition Property="IsEnabled" Value="true"	/>
						</MultiTrigger.Conditions>
						<Setter Property="ToolTip"	Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
						<Setter Property="Foreground"	Value="Red"/>
						<Setter Property="BorderBrush" Value="Red"/>
					</MultiTrigger>
				</Style.Triggers>
			</Style>

			
			<Style x:Key="errorDatePicker" TargetType="{x:Type	DatePicker}" BasedOn="{StaticResource {x:Type DatePicker}}">
			
				<Setter Property="Validation.ErrorTemplate">
					<Setter.Value>
						<ControlTemplate>
							<DockPanel>
								<Border BorderBrush="Red" BorderThickness="2">
									<AdornedElementPlaceholder	/>
								</Border>
							</DockPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="Validation.HasError"	Value="true" />
							<Condition Property="IsEnabled" Value="true"	/>
						</MultiTrigger.Conditions>
						<Setter Property="ToolTip"	Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
						<Setter Property="Foreground"	Value="Red"/>
						<Setter Property="BorderBrush" Value="Red"/>
					</MultiTrigger>
				</Style.Triggers>
			</Style>
			
			<!--<Style x:Key="errorDateTimeControl" TargetType="{x:Type	DatePicker}" BasedOn="{StaticResource {x:Type DatePicker}}">-->
			<Style x:Key="errorDateTimeControl"	TargetType="{x:Type ui:DateTimeControl}" >
				<Setter Property="Validation.ErrorTemplate">
					<Setter.Value>
						<ControlTemplate>
							<DockPanel>
								<Border BorderBrush="Red" BorderThickness="2">
									<AdornedElementPlaceholder	/>
								</Border>
							</DockPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="Validation.HasError"	Value="true" />
							<Condition Property="IsEnabled" Value="true"	/>
						</MultiTrigger.Conditions>
						<Setter Property="ToolTip"	Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
						<Setter Property="Foreground"	Value="Red"/>
						<Setter Property="BorderBrush" Value="Red"/>
					</MultiTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="MyContextMenuStyle" TargetType="{x:Type	ContextMenu}">
				<Setter Property="OverridesDefaultStyle" Value="True"/>
				<Setter Property="SnapsToDevicePixels"	Value="True"/>
				<!--Setter Property="Foreground"	Value="{StaticResource TextBrush}"/-->
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ContextMenu}">
							<Border 
								Background="{StaticResource ContextMenueBackgroundBrush}"
								BorderBrush="{StaticResource NormalBrush}" Padding="4"
								BorderThickness="2">
								<StackPanel	ClipToBounds="True" Orientation="Vertical" IsItemsHost="True"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<SolidColorBrush x:Key="CmdAreaBrush" Color="#203050"/>
			<!--<SolidColorBrush x:Key="CmdAreaBrush" Color="#00264d"/>-->
			<Style x:Key="Style_HeaderGripper" TargetType="{x:Type Thumb}">
				 <Setter	Property="Width" Value="8"/>
				 <Setter	Property="Background" Value="Transparent"/>
				 <Setter	Property="Cursor"	Value="SizeWE"/>
				 <Setter	Property="Template">
					  <Setter.Value>
							<ControlTemplate TargetType="{x:Type Thumb}">
								 <Border	Padding="{TemplateBinding Padding}"	Background="{TemplateBinding Background}"/>
							</ControlTemplate>
					  </Setter.Value>
				 </Setter>
			</Style>


		<Style x:Key="HeaderStyle"	TargetType="{x:Type DataGridColumnHeader}" >
			<Setter Property="Foreground"	Value="White" />
				
				<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridColumnHeader}"	>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition	Width="*" />
								<ColumnDefinition	Width="Auto" />
						  </Grid.ColumnDefinitions>
							 <Border	x:Name="BackgroundBorder" BorderThickness="0,0,1,0"  BorderBrush="Gray"
									Background="{StaticResource CmdAreaBrush}" Grid.ColumnSpan="2"	/>
							<ContentPresenter	Margin="6,6,6,6" VerticalAlignment="Center" />
							<Rectangle Width="1"	Fill="#AAC377"	HorizontalAlignment="Right" Grid.ColumnSpan="2"	/>
						  <Rectangle Width="1" Margin="0,0,1,0" Fill="#425B10" HorizontalAlignment="Right" Grid.ColumnSpan="2" />
						  <Thumb	x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource Style_HeaderGripper}"/>
						  <Thumb	x:Name="PART_RightHeaderGripper"	HorizontalAlignment="Right" Style="{StaticResource	Style_HeaderGripper}"/>
							
								<Path	Name="UpArrow"	Fill="LawnGreen" HorizontalAlignment="Right"	Grid.Column="1"
								  VerticalAlignment="Center" Margin="0,0,7,0" Visibility="Hidden">
								<Path.Data>
									<PathGeometry>
										<PathFigure	StartPoint="0,0">
											<LineSegment Point="6,0"/>
											<LineSegment Point="3,5"/>
											<LineSegment Point="0,0"/>
										</PathFigure>
									</PathGeometry>
								</Path.Data>
							</Path>
							<Path	Name="DownArrow" Fill="LawnGreen" HorizontalAlignment="Right" Grid.Column="1"
								  VerticalAlignment="Center" Margin="0,0,7,0" Visibility="Hidden">
								<Path.Data>
									<PathGeometry>
										<PathFigure	StartPoint="0,5">
											<LineSegment Point="6,5"/>
											<LineSegment Point="3,0"/>
											<LineSegment Point="0,5"/>
										</PathFigure>
									</PathGeometry>
								</Path.Data>
							</Path>
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger	Property="SortDirection" Value="Descending">
								<Setter TargetName="UpArrow" Property="Visibility"	Value="Hidden"/>
								<Setter TargetName="DownArrow" Property="Visibility" Value="Visible"/>
							</Trigger>
							<Trigger	Property="SortDirection" Value="Ascending">
								<Setter TargetName="DownArrow" Property="Visibility" Value="Hidden"/>
								<Setter TargetName="UpArrow" Property="Visibility"	Value="Visible"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>

		</Style>



		<Style x:Key="MyDataGridCell"	TargetType="DataGridCell" BasedOn="{StaticResource	{x:Type DataGridCell}}">
			<Setter	Property="Background" Value="Transparent"/>
			<Setter Property="Height" Value="32"/>
          <Setter  Property="HorizontalAlignment" Value="Right"/>
            <!--Zellinhalte mittig ausrichten-->
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGridCell}">
                  <Grid	Background="{TemplateBinding Background}"	 >
                        <ContentPresenter	VerticalAlignment="Center"	Margin="5,0"  />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			
			<Style.Triggers>
				<!--ermöglicht 1-Click-Auswahl
				ganz wichtig: Binding mit "UpdateSourceTrigger=PropertyChanged" - sonst gehts nicht !!!
				-->
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="True"/>
						<Condition Property="IsReadOnly"	Value="False"/>
					</MultiTrigger.Conditions>
				</MultiTrigger>		
				
				<Trigger	Property="IsSelected" Value="True">
					<Setter Property="Background"	Value="LawnGreen"/>
					<Setter Property="Foreground"	Value="Black"/>
				</Trigger>
         </Style.Triggers>
		</Style>



      <Style TargetType="{x:Type	DataGridRow}">
			<Setter Property="Margin" Value="0,1"/>
			<Setter Property="Foreground"	Value="White" />
			<Setter Property="Background"	Value="#FF303030"></Setter>
		</Style>


		</ResourceDictionary>
	</Application.Resources>
</Application>
